package ejercicioJardineria;

import java.sql.*;
import java.util.InputMismatchException;
import java.util.Scanner;

public class Principal {

	// static Connection conexion = Conexiones.getMysql("ejemplo25", "root", "");
	static Connection conexion = Conexiones.getOracle("jardineria", "jardineria");

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);
		int opcion = 0;

		do {
			mostrarMenu();

			try {
				opcion = sc.nextInt();
			} catch (InputMismatchException e) {
				opcion = 99;
				sc.next();
			}
			switch (opcion) {
			case 1:
				// nombre, apellido1, apellido2, extensión, email, codigooficina,
				// codigojefe, y puesto
				insertarempleado("Nombre1", "apellido1", "apellido2", "Ext 1", "nombre1@correo.es", "ofi1", 9999,
						"Puesto1");
				// OK
				insertarempleado("Nombre1", "apellido1", "apellido2", "Ext 1", "nombre1@correo.es", "TAL-ES", 1,
						"Puesto1");

				break;
			case 2:
                     verpedidoscliente(2); // no existe
                     
                     verpedidoscliente(6); // 8 no tiene pedidos
                     
                     verpedidoscliente(1); // 9, 3, 23, OK
                     
				break;
			case 3:

				break;
			case 4:

				break;

			case 5:

				break;

			case 6:

				break;

			case 0:
				System.out.println("FIN DE MENÚ!");
				break;
			default:
				System.out.println("Seleccione una opción válida!");
				break;
			}
		} while (opcion != 0);

		sc.close();
		try {
			conexion.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private static void verpedidoscliente(int codigocliente) {
	
		String sql1="select nombrecliente, lineadireccion1 from clientes where codigocliente = ?";
		String sql2="select count(*) from pedidos where codigocliente = ?";
		
		try {
			PreparedStatement sent = conexion.prepareStatement(sql1);
			sent.setInt(1, codigocliente);
			ResultSet res = sent.executeQuery();
			if (res.next()) {
				// cliente existe, contamos pedidos
				PreparedStatement sent2 = conexion.prepareStatement(sql2);
				sent2.setInt(1, codigocliente);
				ResultSet re2 = sent2.executeQuery();
				re2.next();
				// Visualizamos
				System.out.println("COD-CLIENTE: " + codigocliente+".           NOMBRE: "+res.getString(1) );  
				System.out.println("DIRECCIÓN1: " + res.getString(2)  +".     Número de pedidos: " +  re2.getInt(1));
				System.out.println("---------------------------------------------------------------");  

				if (re2.getInt(1) > 0) {
					//Ir al método para visualizar los pedidos
					listadopedidoscliente(codigocliente);
				}
				
				
				sent.close();
				sent2.close();
				res.close();
				re2.close();
				
			}
			else {
				System.out.println("----------------------------------");
				System.out.println("Codigo de cliente no existe: " + codigocliente);
				System.out.println("----------------------------------");
				
			}
			res.close();
			sent.close();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		
		
		
		
		
	}

	private static void listadopedidoscliente(int codigocliente) {
		//  COD-PEDIDO:  xxxxxxx   FECHA PEDIDO: xxxxxxxxxxx  ESTADO DEL PEDIDO: xxxxxxxxxxx   
		String sql1="SELECT codigopedido,fechapedido,estado FROM pedidos where codigocliente = ? order by codigopedido";
		try {
			PreparedStatement sent = conexion.prepareStatement(sql1);
			sent.setInt(1, codigocliente);
			ResultSet res = sent.executeQuery();
			while (res.next()) {
				
				System.out.println("   COD-PEDIDO: " +  res.getInt(1) +"  FECHA PEDIDO: " 
				+ res.getDate(2) + "   ESTADO DEL PEDIDO: " + res.getString(3));
				
				System.out.printf("      %9s  %9s %-40s %10s %10s %10s %n",
						"NUM-LINEA",  "COD-PROD","NOMBRE PRODUCTO","CANTIDAD",
						"PREC-UNID","IMPORTE");
				System.out.printf("      %9s  %9s %-40s %10s %10s %10s %n",
						"---------",  "---------","----------------------------------------","----------",
						"----------","----------");
			
				// detalle del pedido
				String sql2="SELECT  numerolinea ,  codigoproducto, nombre, cantidad, preciounidad, cantidad*preciounidad"
						+ " FROM  detallepedidos join productos using(codigoproducto) "
						+ " where codigopedido = ? order by numerolinea ";
				
				int sumacantidad=0;
				float sumaprecio=0, sumaimporte=0;
				
				PreparedStatement sent2 = conexion.prepareStatement(sql2);
				sent2.setInt(1, res.getInt(1));
				ResultSet res2 = sent2.executeQuery();
				while (res2.next()) {
					System.out.printf("      %9s  %9s %-40s %10s %10s %10s %n",
							res2.getInt(1), res2.getString(2), res2.getString(3),
							res2.getInt(4),	res2.getFloat(5), 	res2.getFloat(6));
					
					
			 	}
				System.out.printf("      %9s  %9s %-40s %10s %10s %10s %n",
						"---------",  "---------","----------------------------------------","----------",
						"----------","----------");
				res2.close();
				sent2.close();
				
			
			} // fin pedidos

			System.out.printf("      %9s  %9s %-40s %10s %10s %10s %n",
					"---------",  "---------","----------------------------------------","----------",
					"----------","----------");
			System.out.println();

			res.close();
			sent.close();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		
		
		
		
	}

	private static void insertarempleado(String nombre, String apellido1, String apellido2, String extension,
			String email, String codigooficina, int codigojefe, String puesto) {

		String mensaje = "";
		int error = 0;
		// comprobar oficina
		if (!comprobaroficina(codigooficina)) {
			// no existe la oficina
			error = 1;
			mensaje = mensaje + "LA OFICINA NO EXISTE: " + codigooficina;
		}

		// Comprobar si existe empleado jefe
		if (!comprobarempleado(codigojefe)) {
			// no existe la oficina
			error = 1;
			mensaje = mensaje + "\nEL JEFE NO EXISTE: " + codigojefe;
		}

		if (error == 0) {
			// a insertar
			String sql1 = "insert into empleados (codigoempleado,  nombre,  apellido1,  apellido2,  extension,  email,   codigooficina,  codigojefe, puesto)"
					+ " values (?, ?,?, ?,?, ?,?, ?,? )";
			// crear el código de empleado

			String sql2 = "select max(codigoempleado)+1 from empleados";
			PreparedStatement sent;
			try {
				sent = conexion.prepareStatement(sql2);
				ResultSet res = sent.executeQuery();
				res.next();
				int codemple = res.getInt(1);

				sent = conexion.prepareStatement(sql1);
				sent.setInt(1, codemple);
				sent.setString(2, nombre);
				sent.setString(3, apellido1);
				sent.setString(4, apellido2);
				sent.setString(5, extension);
				sent.setString(6, email);
				sent.setString(7, codigooficina);
				sent.setInt(8, codigojefe);
				sent.setString(9, puesto);

				int filas = sent.executeUpdate();

				System.out.println("Empleado insertado con el código " + codemple);

				res.close();
				sent.close();

			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		} else {
			System.out.println("ERROR. NO SE PUEDE INSERTAR: ");
			System.out.println(mensaje);

		}

	}

	private static boolean comprobarempleado(int codigojefe) {
		boolean existe = false;

		String sql = "select * from empleados where codigoempleado= ?";

		try {
			PreparedStatement sent = conexion.prepareStatement(sql);
			sent.setInt(1, codigojefe);
			ResultSet res = sent.executeQuery();
			if (res.next()) {
				existe = true;
			}
			res.close();
			sent.close();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return existe;
	}

	private static boolean comprobaroficina(String codigooficina) {

		boolean existe = false;

		String sql = "select count(*) from oficinas where codigooficina= ?";

		try {
			PreparedStatement sent = conexion.prepareStatement(sql);
			sent.setString(1, codigooficina);
			ResultSet res = sent.executeQuery();
			res.next();
			if (res.getInt(1) == 1) {
				existe = true; // oficina existe
			}
			res.close();
			sent.close();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return existe;

	}

	private static void mostrarMenu() {

		System.out.println("------------------------------------------------------");
		System.out.println("  .  1 Insertar Empleado ");
		System.out.println("  .  2 Visualizar pedidos de un cliente.");
		System.out.println("  .  3 Crear clientes sin pedido. ");
		System.out.println("  .  4 Actualizar Clientes por empleado.");
		System.out.println("  .  5 Crear STOCKACTUALIZADO.");
		System.out.println("  .  6 Oficinas con función almacenada.");
		System.out.println("  .  7 Ver los pedidos de todos los clientes.");
		System.out.println("  .  8 Tratar nuevos empleados.");
		System.out.println("  .  0 SALIR.");
		System.out.println("------------------------------------------------------");
	}

}
